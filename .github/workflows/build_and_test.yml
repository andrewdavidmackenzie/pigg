name: Build and Test with Coverage

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule: # Build every day at 5PM UTC
    - cron: '0 17 * * *'

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: -C instrument-coverage
  LLVM_PROFILE_FILE: pigg-%p-%m.profraw
  RUST_BACKTRACE: 1

jobs:
  Format-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run cargo fmt check
        run: cargo fmt --all -- --check

  all-feature-combinations:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install cargo-all-features
        run: cargo install cargo-all-features

      - name: cargo check-all-features
        run: cargo check-all-features

  arm-build:
    runs-on: ubuntu-latest
    steps:
      - name: Clean up files
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Add target
        run: rustup target add arm-unknown-linux-gnueabihf

      - name: Install armv (armv6) Linker
        run: |
          sudo apt update
          sudo apt install -y gcc-arm-linux-gnueabihf

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build for armv (armv6)
        run: cargo build --target=arm-unknown-linux-gnueabihf

  arm7-build:
    runs-on: ubuntu-latest
    steps:
      - name: Clean up files
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Add target
        run: rustup target add armv7-unknown-linux-gnueabihf

      - name: Install armv7 Linker
        run: |
          sudo apt update
          sudo apt install -y gcc-arm-linux-gnueabihf

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build for armv7
        run: cargo build --target=armv7-unknown-linux-gnueabihf

  arm7-musl-build:
    runs-on: ubuntu-latest
    steps:
      - name: Clean up files
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Add target
        run: rustup target add armv7-unknown-linux-musleabihf

      - name: Install armv7 Linker
        run: |
          sudo apt update
          sudo apt install -y gcc-arm-linux-gnueabihf

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build for armv7-musl
        run: RUSTFLAGS= cargo build --target=armv7-unknown-linux-musleabihf

  aarch64-build:
    runs-on: ubuntu-latest
    steps:
      - name: Clean up files
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Add target
        run: rustup target add aarch64-unknown-linux-gnu

      - name: Install aarch64 Linker
        run: |
          sudo apt update
          sudo apt install -y gcc-aarch64-linux-gnu

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build for aarch64
        run: cargo build --target=aarch64-unknown-linux-gnu

  web-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: add wasm32-unknown-unknown target
        run: rustup target add wasm32-unknown-unknown

      - name: Install cargo binstall
        run: curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Install trunk
        run: cargo binstall trunk

      - name: wasm32 trunk build
        run: make -C piggui trunk-build

  porky-release-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: add thumbv6m-none-eabi target
        run: rustup target add thumbv6m-none-eabi

      - name: Install cargo binstall
        run: curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Install elf2uf2-rs
        run: cargo binstall elf2uf2-rs

      - name: Build porky and porky_w and their UF2 files
        run: RUSTFLAGS= make -C porky uf2s

  hw_tests:
    runs-on: [ self-hosted, macOS, ARM64, pigg ]
    timeout-minutes: 10 # test it times out
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run HW Tests
        run: make hw_tests

  clippy-build-and-test-matrix:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-15 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy,llvm-tools-preview

      - uses: Swatinem/rust-cache@v2

      - name: Install grcov
        if: runner.os != 'Windows'
        run: cargo install grcov

      - name: Setup LCOV
        if: runner.os != 'Windows'
        uses: hrishikesh-kadam/setup-lcov@v1
        with:
          ref: HEAD

      - name: Clippy build and test - non-Linux
        if: runner.os != 'Linux'
        run: make clippy build test

      - name: Clippy build and test - Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install weston
          weston -Bheadless -Sweston &
          make clippy build test
        env:
          WAYLAND_DISPLAY: weston

      - name: Clean up coverage
        if: runner.os != 'Windows'
        run: |
          grcov . --binary-path target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "/*" -o lcov.info
          lcov --remove lcov.info 'target/debug/build/**' 'target/release/build/**' '/usr*' '**/errors.rs' '**/build.rs' '*tests/*' --ignore-errors unused,unused --ignore-errors unsupported --ignore-errors inconsistent --ignore-errors empty,empty -o lcov.info --erase-functions "(?=^.*fmt).+"

      - name: UploadCoverage
        if: runner.os != 'Windows'
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          file: lcov.info
          flags: unittests
          name: codecov-umbrella
          verbose: true
